/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IMGUI;

import Classes.FilePath;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Classes.item;
/**
 *
 * @author thebl
 */
public class Stocklevels extends javax.swing.JFrame {
    String role;
    /**
     * Creates new form Stock level
     */
    public Stocklevels(String role) {
        this.role = role;
        initComponents();
        loadStockLevelsIntoTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableStock = new javax.swing.JTable();
        UpdateStock = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tableStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Stock Level", "Reorder Level", "Item Status", "Delivery Status"
            }
        ));
        jScrollPane1.setViewportView(tableStock);

        UpdateStock.setText("Update Stock");
        UpdateStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateStockActionPerformed(evt);
            }
        });

        jButton1.setText("Return to menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpdateStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(36, 36, 36)
                .addComponent(UpdateStock)
                .addGap(0, 258, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateStockActionPerformed

//PLAN B IF FINANCEMANAGER DOESNT DO
//        // TODO add your handling code here:
//            // Get the selected row from the table
//        int selectedRow = tableStock.getSelectedRow();
//        if (selectedRow != -1) {
//            // Get the item code from the selected row 
//            String itemCode = tableStock.getValueAt(selectedRow, 0).toString();
//
//            // Open the UpdateStockForm and pass the itemCode
//            UpdateStock updateForm = new UpdateStock(itemCode);
//            updateForm.setVisible(true);
//        } else {
//            JOptionPane.showMessageDialog(this, "Please select an item to update stock.");
//        }

    int selectedRow = tableStock.getSelectedRow();
     if (selectedRow == -1) {
         JOptionPane.showMessageDialog(this, "Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
         return;
     }

     // Get item details from the selected row
     String itemCode = tableStock.getValueAt(selectedRow, 0).toString();
     String deliveryStatus = tableStock.getValueAt(selectedRow, 5).toString();

     if (!"In Progress".equalsIgnoreCase(deliveryStatus)) {
         JOptionPane.showMessageDialog(this, "The selected item is not marked as 'In Progress'.", "Error", JOptionPane.ERROR_MESSAGE);
         return;
     }

     String itemsFilePath = FilePath.itemPath;;
     String paymentsFilePath = FilePath.paymentPath;

     try {
         boolean updated = item.updateStockAndDeliveryStatus(itemsFilePath, paymentsFilePath, itemCode);
         if (updated) {
             JOptionPane.showMessageDialog(this, "Stock and delivery status updated successfully!", 
                     "Success", JOptionPane.INFORMATION_MESSAGE);
             loadStockLevelsIntoTable(); // Reload the table after update
         } else {
             JOptionPane.showMessageDialog(this, "No matching payment record found for the selected item.", 
                     "Error", JOptionPane.ERROR_MESSAGE);
         }
     } catch (IOException e) {
         JOptionPane.showMessageDialog(this, "Error updating stock: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_UpdateStockActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
        InventoryManagerGUI IM = new InventoryManagerGUI(role);
        IM.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadStockLevelsIntoTable() {
        // Get the table model from the existing table
        DefaultTableModel tableModel = (DefaultTableModel) tableStock.getModel();
        String itemsFilePath = FilePath.itemPath;;
        String paymentsFilePath = FilePath.paymentPath;

        // Clear existing rows
        tableModel.setRowCount(0);

        try (BufferedReader itemsReader = new BufferedReader(new FileReader(itemsFilePath))) {
            String line;
            while ((line = itemsReader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 7) { // Ensure the correct number of columns
                    String itemCode = data[0];
                    String itemName = data[1];
                    int stockLevel = Integer.parseInt(data[6].trim()); // Current stock
                    String reorderLevel = data[7];
                    String status = data[10];
                    String deliveryStatus = "Null"; // Default to "Null" if not found in payments

                    // Check the payments file for the delivery status
                    try (BufferedReader paymentsReader = new BufferedReader(new FileReader(paymentsFilePath))) {
                        String paymentLine;
                        while ((paymentLine = paymentsReader.readLine()) != null) {
                            String[] paymentData = paymentLine.split(",");
                            if (paymentData.length >= 5 && paymentData[3].trim().equals(itemCode)) {
                                deliveryStatus = paymentData[7]; // Get delivery status from payments file
                                break;
                            }
                        }
                    }

                    // Add the row to the table
                    tableModel.addRow(new Object[]{itemCode, itemName, stockLevel, reorderLevel, status, deliveryStatus});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading stock data: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error parsing stock level: " + e.getMessage(),
                    "Number Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stocklevels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stocklevels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stocklevels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stocklevels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String role = "";
                new Stocklevels(role).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdateStock;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableStock;
    // End of variables declaration//GEN-END:variables
}
