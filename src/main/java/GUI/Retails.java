package GUI;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import Classes.FilePath;
import Classes.SalesEntry;
import Classes.SalesManager;
import java.awt.event.ActionEvent;
import java.io.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author abdul
 */
public class Retails extends JFrame {
    private DefaultTableModel model = new DefaultTableModel();
    private String[] columnName = {"Item Code", "Item Name", "Quantity", "Date", "Total Amount"};
    private int row = -1;
    private SalesManager salesManager;
    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    private BufferedReader br;
    String r;



    /**
     * Creates new form Retails

     */
    public Retails(String role){
        initComponents();
        r = role;
        String filePath = FilePath.salesPath;
        salesManager = new SalesManager(filePath);
        model.setColumnIdentifiers(columnName);
        try {
            populateItemCodes();
        } catch (IOException ex) {
            Logger.getLogger(Retails.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    

    
    



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jsalesTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jquantityField = new javax.swing.JTextField();
        jaddButton = new javax.swing.JButton();
        jeditButton = new javax.swing.JButton();
        jdeleteButton = new javax.swing.JButton();
        jsaveButton = new javax.swing.JButton();
        itemCodeComboBox = new javax.swing.JComboBox<>();
        jbackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jsalesTable.setModel(model);
        jsalesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jsalesTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jsalesTable);

        jLabel1.setText("Item Code:");

        jLabel4.setText("Quantity:");

        jaddButton.setText("Add");
        jaddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaddButtonActionPerformed(evt);
            }
        });

        jeditButton.setText("Edit");
        jeditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jeditButtonActionPerformed(evt);
            }
        });

        jdeleteButton.setText("Delete");
        jdeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdeleteButtonActionPerformed(evt);
            }
        });

        jsaveButton.setText("Save");
        jsaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsaveButtonActionPerformed(evt);
            }
        });

        itemCodeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        itemCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeComboBoxActionPerformed(evt);
            }
        });

        jbackButton.setText("Back");
        jbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jquantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jaddButton)
                        .addGap(31, 31, 31)
                        .addComponent(jeditButton)
                        .addGap(26, 26, 26)
                        .addComponent(jdeleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbackButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jsaveButton)
                        .addGap(183, 183, 183))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jbackButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(itemCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jquantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jeditButton)
                    .addComponent(jaddButton)
                    .addComponent(jdeleteButton))
                .addGap(43, 43, 43))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jsaveButton)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    
    private void populateItemCodes() throws IOException {
        String filePath0 = FilePath.itemPath;
        try (BufferedReader britem = new BufferedReader(new FileReader(filePath0))) {
            String line;
            while ((line = britem.readLine()) != null) {
                String[] parts = line.split(",");
                itemCodeComboBox.addItem(parts[0]);
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "The item file was not found. Please ensure the file exists at the specified location.");
            Logger.getLogger(Retails.class.getName()).log(Level.SEVERE, "File not found", ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while reading the item file.");
            Logger.getLogger(Retails.class.getName()).log(Level.SEVERE, "IO Exception", ex);
        }

    }

    public String getItemNameByCode(String itemCode){
                String filePath0 = FilePath.itemPath;
        try (BufferedReader britem = new BufferedReader(new FileReader(filePath0))) {
            String line;
            while ((line = britem.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts[0].equals(itemCode)) {
                    return parts[1];
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Retails.class.getName()).log(Level.SEVERE, "File not found", ex);
        } catch (IOException ex) {
            Logger.getLogger(Retails.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }
    
    public void actionPerformed(ActionEvent e) throws IOException {

        
        closeReader();
    }
    

    private void closeReader() throws IOException {
        
        if (br != null) {
            br.close();
        }
    }
    

    private void jsalesTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsalesTableMouseReleased
        // TODO add your handling code here:
                                         
        row = jsalesTable.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this, "No row selected");
            return;
        }
        
        String itemCode = String.valueOf(model.getValueAt(row, 0));
        String itemName = String.valueOf(model.getValueAt(row, 1));
        String quantity = String.valueOf(model.getValueAt(row, 2));
        String date = String.valueOf(model.getValueAt(row, 3));

        itemCodeComboBox.setSelectedItem(itemCode);
        jquantityField.setText(quantity);
        
        
    }//GEN-LAST:event_jsalesTableMouseReleased

    private void jaddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaddButtonActionPerformed

        String itemCode = (String) itemCodeComboBox.getSelectedItem();
        String quantityString = jquantityField.getText();
        String dateString = new java.text.SimpleDateFormat("dd-MM-yyyy").format(new java.util.Date());
        double unitPrice = salesManager.getUnitPrice(itemCode);
        

        if (itemCode == null || itemCode.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select an item code");
            return;
        }

        if (quantityString.isEmpty() || dateString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields");
        } else {
            int quantity;
            try {
                quantity = Integer.parseInt(quantityString);
                LocalDate.parse(dateString, formatter);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Quantity must be a valid number");
                return;
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Invalid date format. DD-MM-YYYY");
                return;
            }

            if (unitPrice == -1) {
                JOptionPane.showMessageDialog(this, "Item code not found.");
                return;
            }
            
            String itemName = getItemNameByCode(itemCode); 
            if (itemName == null) {
                JOptionPane.showMessageDialog(this, "Item name not found for the selected item code.");
                return;
            }
            SalesEntry entry = new SalesEntry(itemCode, itemName, quantity, dateString, unitPrice);
            salesManager.addSalesEntry(entry);

            String totalAmount = String.format("%.2f", entry.getTotalAmount());
            String[] newRow = {itemCode, itemName, quantityString, dateString, totalAmount};
            model.addRow(newRow);

            JOptionPane.showMessageDialog(this, "Row added successfully");
            clearTextField();
        }


    }//GEN-LAST:event_jaddButtonActionPerformed

    private void jdeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdeleteButtonActionPerformed
        // TODO add your handling code here:
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        } else {
            model.removeRow(row);
            salesManager.deleteSalesEntry(row);
            clearTextField();
            row = -1;
            JOptionPane.showMessageDialog(this, "Row deleted successfully");
        }
        
    }//GEN-LAST:event_jdeleteButtonActionPerformed

    private void jsaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jsaveButtonActionPerformed
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select row to save it in the text file");
        } else {
            String itemCode = String.valueOf(model.getValueAt(row, 0));
            int quantitySold = Integer.parseInt(String.valueOf(model.getValueAt(row, 2)));

            boolean success = salesManager.saveSalesData(itemCode, quantitySold);

            if (success) {
                // Create a new SalesEntry object for the current transaction
                String itemName = String.valueOf(model.getValueAt(row, 1));
                String date = String.valueOf(model.getValueAt(row, 3));
                String itemCategory = salesManager.getItemCategory(itemCode);
                double unitPrice = salesManager.getUnitPrice(itemCode);
                
                SalesEntry newEntry = new SalesEntry(itemCode, itemName, itemCategory, quantitySold, date, unitPrice);
                

                List<SalesEntry> singleEntryList = new ArrayList<>();
                singleEntryList.add(newEntry);

                if (salesManager.saveSalesEntriesToFile(singleEntryList)) {
                    JOptionPane.showMessageDialog(this, "Sales entry saved to file");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to save sales entry to file");
                }

                model.removeRow(row);
                clearTextField();
                row = -1; 
            } else {
                JOptionPane.showMessageDialog(this, "Failed to save data. Check item stock or file integrity.");
            }
        }
        
    }//GEN-LAST:event_jsaveButtonActionPerformed

    private void jeditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jeditButtonActionPerformed
    // TODO add your handling code here:                                           
    if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit");
            return;
        }

        String itemCode = (String) itemCodeComboBox.getSelectedItem();
        String itemName = getItemNameByCode(itemCode); 
        String quantityString = jquantityField.getText();
        String dateString = new java.text.SimpleDateFormat("dd-MM-yyyy").format(new java.util.Date());

        if (itemCode == null || itemCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select an item code");
            return;
        }

        if (itemName.isEmpty() || quantityString.isEmpty() || dateString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields");
            return;
        }

        int quantity;
        try {
            quantity = Integer.parseInt(quantityString);
            LocalDate.parse(dateString, formatter);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity must be a valid number");
            return;
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use DD-MM-YYYY");
            return;
        }

        double unitPrice = salesManager.getUnitPrice(itemCode);
        if (unitPrice == -1) {
            JOptionPane.showMessageDialog(this, "Invalid item code");
            return;
        }

        model.setValueAt(itemCode, row, 0);
        model.setValueAt(itemName, row, 1);
        model.setValueAt(quantityString, row, 2);
        model.setValueAt(dateString, row, 3);

        double totalAmount = unitPrice * quantity;
        String totalAmountString = String.format("%.2f", totalAmount);
        model.setValueAt(totalAmountString, row, 4);

        SalesEntry updatedEntry = new SalesEntry(itemCode, itemName, quantity, dateString, unitPrice);
        salesManager.editSalesEntry(row, updatedEntry);

        clearTextField();
        row = -1;
        JOptionPane.showMessageDialog(this, "Row updated successfully");
    }//GEN-LAST:event_jeditButtonActionPerformed

    private void itemCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedItemCode = (String) itemCodeComboBox.getSelectedItem();


    }//GEN-LAST:event_itemCodeComboBoxActionPerformed

    private void jbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbackButtonActionPerformed
        // TODO add your handling code here:
        var SalesManagerDashboard = new SalesManagerDashboard(r);
        SalesManagerDashboard.show();
        this.hide();
    }//GEN-LAST:event_jbackButtonActionPerformed
    
    

     
    private void clearTextField() {
        itemCodeComboBox.setSelectedItem(null);
        jquantityField.setText("");
        
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Retails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>
        
    //</editor-fold>

   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> itemCodeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jaddButton;
    private javax.swing.JButton jbackButton;
    private javax.swing.JButton jdeleteButton;
    private javax.swing.JButton jeditButton;
    private javax.swing.JTextField jquantityField;
    private javax.swing.JTable jsalesTable;
    private javax.swing.JButton jsaveButton;
    // End of variables declaration//GEN-END:variables
}