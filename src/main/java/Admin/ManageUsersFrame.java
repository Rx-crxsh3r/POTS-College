/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Admin;

import Classes.ManageUsers;
import Classes.User;
import Classes.ViewUsers;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hp
 */
public class ManageUsersFrame extends javax.swing.JFrame {

    private ManageUsers manageUsers; // Declare the instance
    
    public ManageUsersFrame() {
        initComponents();
        populateUsersTable();
        manageUsers = new ManageUsers(); // Initialize the instance
    }
    
    public void populateUsersTable() {
        // Fetch users
        ViewUsers viewUsers = new ViewUsers();
        List<User> users = viewUsers.getUsers();

        // Get the table's model
        DefaultTableModel model = (DefaultTableModel) UsersTable.getModel();
        model.setRowCount(0); // Clear existing rows if any

        // Populate the table
        for (User user : users) {
            model.addRow(new Object[]{
                user.getId(),
                user.getName(),
                user.getUsername(),
                user.getPassword(),
                user.getRole()
            });
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        UsersTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        EditusersBtn = new javax.swing.JButton();
        Addusersbtn = new javax.swing.JButton();
        DeleteusersBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Users");
        setResizable(false);

        UsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Username", "Password", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UsersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(UsersTable);

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel2.setText("Manage Users Page");

        EditusersBtn.setText("EDIT USERS");
        EditusersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditusersBtnActionPerformed(evt);
            }
        });

        Addusersbtn.setText("ADD USERS");
        Addusersbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddusersbtnActionPerformed(evt);
            }
        });

        DeleteusersBtn.setText("DELETE USERS");
        DeleteusersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteusersBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("BACK ->");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Addusersbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addComponent(EditusersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(DeleteusersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BackBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BackBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Addusersbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditusersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteusersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddusersbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddusersbtnActionPerformed
        String userId = LoginFrame.getLoggedInUserId(); // Get the logged-in user ID
        User user = manageUsers.getUserById(userId); // Get the user info
        
        if (user != null && "Administrator".equals(user.getRole())) {
        // Only Administrator can add users
        AddUsersFrame addUsersFrame = new AddUsersFrame(); // Instantiate AddUsersFrame
        addUsersFrame.setVisible(true); // Show AddUsersFrame
        this.setEnabled(false); // Disable interaction with ManageUsersFrame
        addUsersFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                setEnabled(true); // Enable ManageUsersFrame when AddUsersFrame is closed
                populateUsersTable(); // Refresh the users table
            }
        });
    } else {
        JOptionPane.showMessageDialog(this, "Access denied. Only administrators can add users.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        LoginFrame loginFrame = new LoginFrame(); // Instantiate LoginFrame
        loginFrame.setVisible(true); // Show LoginFrame
        this.dispose(); // Close the AdminFrame
        }
    }//GEN-LAST:event_AddusersbtnActionPerformed

    private void EditusersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditusersBtnActionPerformed
        String userId = LoginFrame.getLoggedInUserId(); // Get the logged-in user ID
        User user = manageUsers.getUserById(userId); // Get the user info
        
        if (user != null && "Administrator".equals(user.getRole())) {
        // Only Administrator can edit users
        EditUsersFrame editUsersFrame = new EditUsersFrame(); // Instantiate EditUsersFrame
        editUsersFrame.setVisible(true); // Show EditUsersFrame
        this.setEnabled(false); // Disable interaction with ManageUsersFrame
        editUsersFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                setEnabled(true); // Enable ManageUsersFrame when DeleteUsersFrame is closed
                populateUsersTable(); // Refresh the users table
            }
        });
    } else {
        JOptionPane.showMessageDialog(this, "Access denied. Only administrators can edit users.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        LoginFrame loginFrame = new LoginFrame(); // Instantiate LoginFrame
        loginFrame.setVisible(true); // Show LoginFrame
        this.dispose(); // Close the AdminFrame
        }
    }//GEN-LAST:event_EditusersBtnActionPerformed

    private void DeleteusersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteusersBtnActionPerformed
        String userId = LoginFrame.getLoggedInUserId(); // Get the logged-in user ID
        User user = manageUsers.getUserById(userId); // Get the user info
        
        if (user != null && "Administrator".equals(user.getRole())) {
        // Only Administrator can delete users
        DeleteUsersFrame deleteUsersFrame = new DeleteUsersFrame(); // Instantiate DeleteUsersFrame
        deleteUsersFrame.setVisible(true); // Show DeleteUsersFrame
        this.setEnabled(false); // Disable interaction with ManageUsersFrame
        deleteUsersFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                setEnabled(true); // Enable ManageUsersFrame when DeleteUsersFrame is closed
                populateUsersTable(); // Refresh the users table
            }
        });
    } else {
        JOptionPane.showMessageDialog(this, "Access denied. Only administrators can delete users.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        LoginFrame loginFrame = new LoginFrame(); // Instantiate LoginFrame
        loginFrame.setVisible(true); // Show LoginFrame
        this.dispose(); // Close the AdminFrame
        }
    }//GEN-LAST:event_DeleteusersBtnActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        String userId = LoginFrame.getLoggedInUserId(); // Get the logged-in user ID
        User user = manageUsers.getUserById(userId); // Get the user info
        
        if (user != null && "Administrator".equals(user.getRole())) {
            AdminFrame adminFrame = new AdminFrame(); // Instantiate AdminFrame
            adminFrame.setVisible(true); // Show AdminFrame
            this.dispose(); // Close the ManageUsersFrame
        } else {
        JOptionPane.showMessageDialog(this, "Access denied. Only administrators can use this page.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        LoginFrame loginFrame = new LoginFrame(); // Instantiate LoginFrame
        loginFrame.setVisible(true); // Show LoginFrame
        this.dispose(); // Close the AdminFrame
        }
    }//GEN-LAST:event_BackBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUsersFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addusersbtn;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton DeleteusersBtn;
    private javax.swing.JButton EditusersBtn;
    private javax.swing.JTable UsersTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
